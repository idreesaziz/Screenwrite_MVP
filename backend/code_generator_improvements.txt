CODE GENERATOR IMPROVEMENTS - LESSONS LEARNED
==============================================

## TEXT ANIMATION RULES

⚠️ CRITICAL TEXT ANIMATION RULE: Always use fixed-width containers for typewriter/text reveal effects
- Set explicit width/height that accommodates full text
- Use overflow: hidden to clip content
- Never let text content changes resize containers

CORRECT TYPEWRITER PATTERN:
- Container: Fixed dimensions based on full text
- Text: Use clip-path, width animation, or character-by-character reveals
- Layout: Container size never changes during animation

FORBIDDEN:
❌ Dynamic text content that changes container size
❌ substring() animations without fixed containers
❌ Containers that auto-size to text content during animations

FOR TYPEWRITER EFFECTS:
style: {
  width: 'XXXpx', // Fixed width for full text
  height: 'XXXpx', // Fixed height
  overflow: 'hidden',
  // Then animate content reveal
}

FOR TEXT REVEALS:
- Use clip-path animations
- Use width/max-width animations on wrapper
- Use opacity reveals with fixed positioning

## LAYOUT STABILITY REQUIREMENTS

- All animated containers must have explicit dimensions
- Use transform/opacity for position/visibility changes
- Text reveals use masking, not content manipulation
- Maintain consistent bounding boxes throughout animations

## DATA STRUCTURE CONSISTENCY

⚠️ CRITICAL: Ensure object properties are consistent throughout code
- If using { start, srcStart, srcEnd }, don't reference missing 'end' property
- Calculate missing properties explicitly: end = start + duration
- Validate all object properties exist before use

EXAMPLE FIX:
Instead of: const clipEndFrame = toFrames(clip.end); // undefined
Use: const clipEndFrame = toFrames(clip.start + clipDuration);

## NaN PREVENTION RULES

- Always validate numeric calculations
- Check for undefined properties before math operations
- Provide fallback values for missing data
- Use explicit duration calculations rather than assuming properties exist

## INTERPOLATE BEST PRACTICES

- Ensure all inputRange values are finite numbers
- Verify outputRange matches inputRange length
- Use safeInterpolate wrapper handles edge cases automatically
- Always test mathematical expressions for NaN results

## COMPONENT PROPERTY VALIDATION

Before using object properties:
1. Check if property exists
2. Validate it's a number if used in calculations  
3. Provide sensible defaults for missing values
4. Log warnings for missing expected properties

## ANIMATION TIMING CONSISTENCY

- Use consistent frame calculation patterns
- Validate start/end times make logical sense
- Ensure transitions don't create negative durations
- Test boundary conditions (start of composition, end of composition)

## ADD MORE LESSONS AS WE DISCOVER THEM...

## CROSS-FADE TRANSITIONS

⚠️ CRITICAL CROSS-FADE RULE: Never fade to background color between clips
- Videos should cross-fade DIRECTLY with each other
- Overlapping opacity animations, not sequential fades
- Avoid white/colored flashes between video transitions

PROPER CROSS-FADE PATTERN:
- Video A: opacity 1 → 0 (fading out) 
- Video B: opacity 0 → 1 (fading in) AT THE SAME TIME
- Videos must OVERLAP during transition period
- Background should be black or previous video, never bright colors

FORBIDDEN FADE PATTERNS:
❌ Video fades to 0 opacity showing background
❌ Gap between video end and next video start  
❌ Sequential fades (A fades out, then B fades in)
❌ Bright background colors that create flashes

CORRECT CROSS-FADE TIMING:
- Clip A: from 0s to 3s, fade out from 2.5s to 3s
- Clip B: from 2.5s to 5.5s, fade in from 2.5s to 3s
- 0.5s overlap where both clips are partially visible

CROSS-FADE OPACITY CALCULATIONS:
- Outgoing clip: interpolate(frame, [fadeStart, fadeEnd], [1, 0])
- Incoming clip: interpolate(frame, [fadeStart, fadeEnd], [0, 1])
- Same timing for both, opposite opacity directions
